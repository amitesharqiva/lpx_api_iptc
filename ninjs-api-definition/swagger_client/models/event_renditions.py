# coding: utf-8

"""
    LPX API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventRenditions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contenttype': 'str',
        'bitrate': 'str',
        'aspectratio': 'str',
        'videocodec': 'str',
        'format': 'str'
    }

    attribute_map = {
        'contenttype': 'contenttype',
        'bitrate': 'bitrate',
        'aspectratio': 'aspectratio',
        'videocodec': 'videocodec',
        'format': 'format'
    }

    def __init__(self, contenttype=None, bitrate=None, aspectratio=None, videocodec=None, format=None):  # noqa: E501
        """EventRenditions - a model defined in Swagger"""  # noqa: E501
        self._contenttype = None
        self._bitrate = None
        self._aspectratio = None
        self._videocodec = None
        self._format = None
        self.discriminator = None
        if contenttype is not None:
            self.contenttype = contenttype
        if bitrate is not None:
            self.bitrate = bitrate
        if aspectratio is not None:
            self.aspectratio = aspectratio
        if videocodec is not None:
            self.videocodec = videocodec
        if format is not None:
            self.format = format

    @property
    def contenttype(self):
        """Gets the contenttype of this EventRenditions.  # noqa: E501


        :return: The contenttype of this EventRenditions.  # noqa: E501
        :rtype: str
        """
        return self._contenttype

    @contenttype.setter
    def contenttype(self, contenttype):
        """Sets the contenttype of this EventRenditions.


        :param contenttype: The contenttype of this EventRenditions.  # noqa: E501
        :type: str
        """

        self._contenttype = contenttype

    @property
    def bitrate(self):
        """Gets the bitrate of this EventRenditions.  # noqa: E501


        :return: The bitrate of this EventRenditions.  # noqa: E501
        :rtype: str
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this EventRenditions.


        :param bitrate: The bitrate of this EventRenditions.  # noqa: E501
        :type: str
        """

        self._bitrate = bitrate

    @property
    def aspectratio(self):
        """Gets the aspectratio of this EventRenditions.  # noqa: E501


        :return: The aspectratio of this EventRenditions.  # noqa: E501
        :rtype: str
        """
        return self._aspectratio

    @aspectratio.setter
    def aspectratio(self, aspectratio):
        """Sets the aspectratio of this EventRenditions.


        :param aspectratio: The aspectratio of this EventRenditions.  # noqa: E501
        :type: str
        """

        self._aspectratio = aspectratio

    @property
    def videocodec(self):
        """Gets the videocodec of this EventRenditions.  # noqa: E501


        :return: The videocodec of this EventRenditions.  # noqa: E501
        :rtype: str
        """
        return self._videocodec

    @videocodec.setter
    def videocodec(self, videocodec):
        """Sets the videocodec of this EventRenditions.


        :param videocodec: The videocodec of this EventRenditions.  # noqa: E501
        :type: str
        """

        self._videocodec = videocodec

    @property
    def format(self):
        """Gets the format of this EventRenditions.  # noqa: E501


        :return: The format of this EventRenditions.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this EventRenditions.


        :param format: The format of this EventRenditions.  # noqa: E501
        :type: str
        """

        self._format = format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventRenditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventRenditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
