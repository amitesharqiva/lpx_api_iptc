# coding: utf-8

"""
    Event API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'type': 'str',
        'title': 'str',
        'language': 'str',
        'descriptions': 'list[EventDescriptions]',
        'eventdetails': 'EventEventdetails',
        'places': 'list[EventPlaces]',
        'people': 'list[EventPeople]',
        'subjects': 'list[EventSubjects]',
        'plannedcoverage': 'list[EventPlannedcoverage]'
    }

    attribute_map = {
        'uri': 'uri',
        'type': 'type',
        'title': 'title',
        'language': 'language',
        'descriptions': 'descriptions',
        'eventdetails': 'eventdetails',
        'places': 'places',
        'people': 'people',
        'subjects': 'subjects',
        'plannedcoverage': 'plannedcoverage'
    }

    def __init__(self, uri=None, type=None, title=None, language=None, descriptions=None, eventdetails=None, places=None, people=None, subjects=None, plannedcoverage=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._uri = None
        self._type = None
        self._title = None
        self._language = None
        self._descriptions = None
        self._eventdetails = None
        self._places = None
        self._people = None
        self._subjects = None
        self._plannedcoverage = None
        self.discriminator = None
        if uri is not None:
            self.uri = uri
        if type is not None:
            self.type = type
        if title is not None:
            self.title = title
        if language is not None:
            self.language = language
        if descriptions is not None:
            self.descriptions = descriptions
        if eventdetails is not None:
            self.eventdetails = eventdetails
        if places is not None:
            self.places = places
        if people is not None:
            self.people = people
        if subjects is not None:
            self.subjects = subjects
        if plannedcoverage is not None:
            self.plannedcoverage = plannedcoverage

    @property
    def uri(self):
        """Gets the uri of this Event.  # noqa: E501


        :return: The uri of this Event.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Event.


        :param uri: The uri of this Event.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501


        :return: The type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def title(self):
        """Gets the title of this Event.  # noqa: E501


        :return: The title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.


        :param title: The title of this Event.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def language(self):
        """Gets the language of this Event.  # noqa: E501


        :return: The language of this Event.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Event.


        :param language: The language of this Event.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def descriptions(self):
        """Gets the descriptions of this Event.  # noqa: E501


        :return: The descriptions of this Event.  # noqa: E501
        :rtype: list[EventDescriptions]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this Event.


        :param descriptions: The descriptions of this Event.  # noqa: E501
        :type: list[EventDescriptions]
        """

        self._descriptions = descriptions

    @property
    def eventdetails(self):
        """Gets the eventdetails of this Event.  # noqa: E501


        :return: The eventdetails of this Event.  # noqa: E501
        :rtype: EventEventdetails
        """
        return self._eventdetails

    @eventdetails.setter
    def eventdetails(self, eventdetails):
        """Sets the eventdetails of this Event.


        :param eventdetails: The eventdetails of this Event.  # noqa: E501
        :type: EventEventdetails
        """

        self._eventdetails = eventdetails

    @property
    def places(self):
        """Gets the places of this Event.  # noqa: E501


        :return: The places of this Event.  # noqa: E501
        :rtype: list[EventPlaces]
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this Event.


        :param places: The places of this Event.  # noqa: E501
        :type: list[EventPlaces]
        """

        self._places = places

    @property
    def people(self):
        """Gets the people of this Event.  # noqa: E501


        :return: The people of this Event.  # noqa: E501
        :rtype: list[EventPeople]
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this Event.


        :param people: The people of this Event.  # noqa: E501
        :type: list[EventPeople]
        """

        self._people = people

    @property
    def subjects(self):
        """Gets the subjects of this Event.  # noqa: E501


        :return: The subjects of this Event.  # noqa: E501
        :rtype: list[EventSubjects]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this Event.


        :param subjects: The subjects of this Event.  # noqa: E501
        :type: list[EventSubjects]
        """

        self._subjects = subjects

    @property
    def plannedcoverage(self):
        """Gets the plannedcoverage of this Event.  # noqa: E501


        :return: The plannedcoverage of this Event.  # noqa: E501
        :rtype: list[EventPlannedcoverage]
        """
        return self._plannedcoverage

    @plannedcoverage.setter
    def plannedcoverage(self, plannedcoverage):
        """Sets the plannedcoverage of this Event.


        :param plannedcoverage: The plannedcoverage of this Event.  # noqa: E501
        :type: list[EventPlannedcoverage]
        """

        self._plannedcoverage = plannedcoverage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
