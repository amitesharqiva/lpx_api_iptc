# coding: utf-8

"""
    News Events API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewsEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'standard': 'NewsEventStandard',
        'firstcreated': 'date',
        'language': 'str',
        'type': 'str',
        'representationtype': 'str',
        'pubstatus': 'str',
        'urgency': 'int',
        'headlines': 'list[NewsEventHeadlines]',
        'profile': 'str',
        'copyrightholder': 'str',
        'copyrightnotice': 'str',
        'usageterms': 'str',
        'slugline': 'str',
        'bodies': 'list[NewsEventBodies]',
        'genres': 'list[NewsEventGenres]',
        'subjects': 'list[NewsEventSubjects]',
        'by': 'str',
        'located': 'str',
        'altids': 'list[NewsEventHeadlines]',
        'ednote': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'standard': 'standard',
        'firstcreated': 'firstcreated',
        'language': 'language',
        'type': 'type',
        'representationtype': 'representationtype',
        'pubstatus': 'pubstatus',
        'urgency': 'urgency',
        'headlines': 'headlines',
        'profile': 'profile',
        'copyrightholder': 'copyrightholder',
        'copyrightnotice': 'copyrightnotice',
        'usageterms': 'usageterms',
        'slugline': 'slugline',
        'bodies': 'bodies',
        'genres': 'genres',
        'subjects': 'subjects',
        'by': 'by',
        'located': 'located',
        'altids': 'altids',
        'ednote': 'ednote'
    }

    def __init__(self, uri=None, standard=None, firstcreated=None, language=None, type=None, representationtype=None, pubstatus=None, urgency=None, headlines=None, profile=None, copyrightholder=None, copyrightnotice=None, usageterms=None, slugline=None, bodies=None, genres=None, subjects=None, by=None, located=None, altids=None, ednote=None):  # noqa: E501
        """NewsEvent - a model defined in Swagger"""  # noqa: E501
        self._uri = None
        self._standard = None
        self._firstcreated = None
        self._language = None
        self._type = None
        self._representationtype = None
        self._pubstatus = None
        self._urgency = None
        self._headlines = None
        self._profile = None
        self._copyrightholder = None
        self._copyrightnotice = None
        self._usageterms = None
        self._slugline = None
        self._bodies = None
        self._genres = None
        self._subjects = None
        self._by = None
        self._located = None
        self._altids = None
        self._ednote = None
        self.discriminator = None
        if uri is not None:
            self.uri = uri
        if standard is not None:
            self.standard = standard
        if firstcreated is not None:
            self.firstcreated = firstcreated
        if language is not None:
            self.language = language
        if type is not None:
            self.type = type
        if representationtype is not None:
            self.representationtype = representationtype
        if pubstatus is not None:
            self.pubstatus = pubstatus
        if urgency is not None:
            self.urgency = urgency
        if headlines is not None:
            self.headlines = headlines
        if profile is not None:
            self.profile = profile
        if copyrightholder is not None:
            self.copyrightholder = copyrightholder
        if copyrightnotice is not None:
            self.copyrightnotice = copyrightnotice
        if usageterms is not None:
            self.usageterms = usageterms
        if slugline is not None:
            self.slugline = slugline
        if bodies is not None:
            self.bodies = bodies
        if genres is not None:
            self.genres = genres
        if subjects is not None:
            self.subjects = subjects
        if by is not None:
            self.by = by
        if located is not None:
            self.located = located
        if altids is not None:
            self.altids = altids
        if ednote is not None:
            self.ednote = ednote

    @property
    def uri(self):
        """Gets the uri of this NewsEvent.  # noqa: E501


        :return: The uri of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this NewsEvent.


        :param uri: The uri of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def standard(self):
        """Gets the standard of this NewsEvent.  # noqa: E501


        :return: The standard of this NewsEvent.  # noqa: E501
        :rtype: NewsEventStandard
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this NewsEvent.


        :param standard: The standard of this NewsEvent.  # noqa: E501
        :type: NewsEventStandard
        """

        self._standard = standard

    @property
    def firstcreated(self):
        """Gets the firstcreated of this NewsEvent.  # noqa: E501


        :return: The firstcreated of this NewsEvent.  # noqa: E501
        :rtype: date
        """
        return self._firstcreated

    @firstcreated.setter
    def firstcreated(self, firstcreated):
        """Sets the firstcreated of this NewsEvent.


        :param firstcreated: The firstcreated of this NewsEvent.  # noqa: E501
        :type: date
        """

        self._firstcreated = firstcreated

    @property
    def language(self):
        """Gets the language of this NewsEvent.  # noqa: E501


        :return: The language of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this NewsEvent.


        :param language: The language of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def type(self):
        """Gets the type of this NewsEvent.  # noqa: E501


        :return: The type of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewsEvent.


        :param type: The type of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def representationtype(self):
        """Gets the representationtype of this NewsEvent.  # noqa: E501


        :return: The representationtype of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._representationtype

    @representationtype.setter
    def representationtype(self, representationtype):
        """Sets the representationtype of this NewsEvent.


        :param representationtype: The representationtype of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._representationtype = representationtype

    @property
    def pubstatus(self):
        """Gets the pubstatus of this NewsEvent.  # noqa: E501


        :return: The pubstatus of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._pubstatus

    @pubstatus.setter
    def pubstatus(self, pubstatus):
        """Sets the pubstatus of this NewsEvent.


        :param pubstatus: The pubstatus of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._pubstatus = pubstatus

    @property
    def urgency(self):
        """Gets the urgency of this NewsEvent.  # noqa: E501


        :return: The urgency of this NewsEvent.  # noqa: E501
        :rtype: int
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this NewsEvent.


        :param urgency: The urgency of this NewsEvent.  # noqa: E501
        :type: int
        """

        self._urgency = urgency

    @property
    def headlines(self):
        """Gets the headlines of this NewsEvent.  # noqa: E501


        :return: The headlines of this NewsEvent.  # noqa: E501
        :rtype: list[NewsEventHeadlines]
        """
        return self._headlines

    @headlines.setter
    def headlines(self, headlines):
        """Sets the headlines of this NewsEvent.


        :param headlines: The headlines of this NewsEvent.  # noqa: E501
        :type: list[NewsEventHeadlines]
        """

        self._headlines = headlines

    @property
    def profile(self):
        """Gets the profile of this NewsEvent.  # noqa: E501


        :return: The profile of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this NewsEvent.


        :param profile: The profile of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def copyrightholder(self):
        """Gets the copyrightholder of this NewsEvent.  # noqa: E501


        :return: The copyrightholder of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._copyrightholder

    @copyrightholder.setter
    def copyrightholder(self, copyrightholder):
        """Sets the copyrightholder of this NewsEvent.


        :param copyrightholder: The copyrightholder of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._copyrightholder = copyrightholder

    @property
    def copyrightnotice(self):
        """Gets the copyrightnotice of this NewsEvent.  # noqa: E501


        :return: The copyrightnotice of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._copyrightnotice

    @copyrightnotice.setter
    def copyrightnotice(self, copyrightnotice):
        """Sets the copyrightnotice of this NewsEvent.


        :param copyrightnotice: The copyrightnotice of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._copyrightnotice = copyrightnotice

    @property
    def usageterms(self):
        """Gets the usageterms of this NewsEvent.  # noqa: E501


        :return: The usageterms of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._usageterms

    @usageterms.setter
    def usageterms(self, usageterms):
        """Sets the usageterms of this NewsEvent.


        :param usageterms: The usageterms of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._usageterms = usageterms

    @property
    def slugline(self):
        """Gets the slugline of this NewsEvent.  # noqa: E501


        :return: The slugline of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._slugline

    @slugline.setter
    def slugline(self, slugline):
        """Sets the slugline of this NewsEvent.


        :param slugline: The slugline of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._slugline = slugline

    @property
    def bodies(self):
        """Gets the bodies of this NewsEvent.  # noqa: E501


        :return: The bodies of this NewsEvent.  # noqa: E501
        :rtype: list[NewsEventBodies]
        """
        return self._bodies

    @bodies.setter
    def bodies(self, bodies):
        """Sets the bodies of this NewsEvent.


        :param bodies: The bodies of this NewsEvent.  # noqa: E501
        :type: list[NewsEventBodies]
        """

        self._bodies = bodies

    @property
    def genres(self):
        """Gets the genres of this NewsEvent.  # noqa: E501


        :return: The genres of this NewsEvent.  # noqa: E501
        :rtype: list[NewsEventGenres]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this NewsEvent.


        :param genres: The genres of this NewsEvent.  # noqa: E501
        :type: list[NewsEventGenres]
        """

        self._genres = genres

    @property
    def subjects(self):
        """Gets the subjects of this NewsEvent.  # noqa: E501


        :return: The subjects of this NewsEvent.  # noqa: E501
        :rtype: list[NewsEventSubjects]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this NewsEvent.


        :param subjects: The subjects of this NewsEvent.  # noqa: E501
        :type: list[NewsEventSubjects]
        """

        self._subjects = subjects

    @property
    def by(self):
        """Gets the by of this NewsEvent.  # noqa: E501


        :return: The by of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._by

    @by.setter
    def by(self, by):
        """Sets the by of this NewsEvent.


        :param by: The by of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._by = by

    @property
    def located(self):
        """Gets the located of this NewsEvent.  # noqa: E501


        :return: The located of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._located

    @located.setter
    def located(self, located):
        """Sets the located of this NewsEvent.


        :param located: The located of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._located = located

    @property
    def altids(self):
        """Gets the altids of this NewsEvent.  # noqa: E501


        :return: The altids of this NewsEvent.  # noqa: E501
        :rtype: list[NewsEventHeadlines]
        """
        return self._altids

    @altids.setter
    def altids(self, altids):
        """Sets the altids of this NewsEvent.


        :param altids: The altids of this NewsEvent.  # noqa: E501
        :type: list[NewsEventHeadlines]
        """

        self._altids = altids

    @property
    def ednote(self):
        """Gets the ednote of this NewsEvent.  # noqa: E501


        :return: The ednote of this NewsEvent.  # noqa: E501
        :rtype: str
        """
        return self._ednote

    @ednote.setter
    def ednote(self, ednote):
        """Sets the ednote of this NewsEvent.


        :param ednote: The ednote of this NewsEvent.  # noqa: E501
        :type: str
        """

        self._ednote = ednote

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewsEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewsEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
