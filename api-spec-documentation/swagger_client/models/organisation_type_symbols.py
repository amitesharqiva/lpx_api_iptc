# coding: utf-8

"""
    LPX API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganisationTypeSymbols(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticker': 'str',
        'exchange': 'str',
        'symboltype': 'str',
        'symbol': 'str'
    }

    attribute_map = {
        'ticker': 'ticker',
        'exchange': 'exchange',
        'symboltype': 'symboltype',
        'symbol': 'symbol'
    }

    def __init__(self, ticker=None, exchange=None, symboltype=None, symbol=None):  # noqa: E501
        """OrganisationTypeSymbols - a model defined in Swagger"""  # noqa: E501
        self._ticker = None
        self._exchange = None
        self._symboltype = None
        self._symbol = None
        self.discriminator = None
        if ticker is not None:
            self.ticker = ticker
        if exchange is not None:
            self.exchange = exchange
        if symboltype is not None:
            self.symboltype = symboltype
        if symbol is not None:
            self.symbol = symbol

    @property
    def ticker(self):
        """Gets the ticker of this OrganisationTypeSymbols.  # noqa: E501


        :return: The ticker of this OrganisationTypeSymbols.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this OrganisationTypeSymbols.


        :param ticker: The ticker of this OrganisationTypeSymbols.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def exchange(self):
        """Gets the exchange of this OrganisationTypeSymbols.  # noqa: E501


        :return: The exchange of this OrganisationTypeSymbols.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this OrganisationTypeSymbols.


        :param exchange: The exchange of this OrganisationTypeSymbols.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def symboltype(self):
        """Gets the symboltype of this OrganisationTypeSymbols.  # noqa: E501


        :return: The symboltype of this OrganisationTypeSymbols.  # noqa: E501
        :rtype: str
        """
        return self._symboltype

    @symboltype.setter
    def symboltype(self, symboltype):
        """Sets the symboltype of this OrganisationTypeSymbols.


        :param symboltype: The symboltype of this OrganisationTypeSymbols.  # noqa: E501
        :type: str
        """

        self._symboltype = symboltype

    @property
    def symbol(self):
        """Gets the symbol of this OrganisationTypeSymbols.  # noqa: E501


        :return: The symbol of this OrganisationTypeSymbols.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this OrganisationTypeSymbols.


        :param symbol: The symbol of this OrganisationTypeSymbols.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganisationTypeSymbols, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationTypeSymbols):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
