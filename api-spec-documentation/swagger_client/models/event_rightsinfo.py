# coding: utf-8

"""
    LPX API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventRightsinfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'langid': 'str',
        'linkedrights': 'str',
        'encodedrights': 'str'
    }

    attribute_map = {
        'langid': 'langid',
        'linkedrights': 'linkedrights',
        'encodedrights': 'encodedrights'
    }

    def __init__(self, langid=None, linkedrights=None, encodedrights=None):  # noqa: E501
        """EventRightsinfo - a model defined in Swagger"""  # noqa: E501
        self._langid = None
        self._linkedrights = None
        self._encodedrights = None
        self.discriminator = None
        if langid is not None:
            self.langid = langid
        if linkedrights is not None:
            self.linkedrights = linkedrights
        if encodedrights is not None:
            self.encodedrights = encodedrights

    @property
    def langid(self):
        """Gets the langid of this EventRightsinfo.  # noqa: E501


        :return: The langid of this EventRightsinfo.  # noqa: E501
        :rtype: str
        """
        return self._langid

    @langid.setter
    def langid(self, langid):
        """Sets the langid of this EventRightsinfo.


        :param langid: The langid of this EventRightsinfo.  # noqa: E501
        :type: str
        """

        self._langid = langid

    @property
    def linkedrights(self):
        """Gets the linkedrights of this EventRightsinfo.  # noqa: E501


        :return: The linkedrights of this EventRightsinfo.  # noqa: E501
        :rtype: str
        """
        return self._linkedrights

    @linkedrights.setter
    def linkedrights(self, linkedrights):
        """Sets the linkedrights of this EventRightsinfo.


        :param linkedrights: The linkedrights of this EventRightsinfo.  # noqa: E501
        :type: str
        """

        self._linkedrights = linkedrights

    @property
    def encodedrights(self):
        """Gets the encodedrights of this EventRightsinfo.  # noqa: E501


        :return: The encodedrights of this EventRightsinfo.  # noqa: E501
        :rtype: str
        """
        return self._encodedrights

    @encodedrights.setter
    def encodedrights(self, encodedrights):
        """Sets the encodedrights of this EventRightsinfo.


        :param encodedrights: The encodedrights of this EventRightsinfo.  # noqa: E501
        :type: str
        """

        self._encodedrights = encodedrights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventRightsinfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventRightsinfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
