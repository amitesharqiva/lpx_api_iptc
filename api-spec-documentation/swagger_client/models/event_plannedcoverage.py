# coding: utf-8

"""
    LPX API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventPlannedcoverage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'title': 'str',
        'pubstatus': 'str',
        'commissioned': 'CommissionedType',
        'dates': 'DatesobjectType',
        'type': 'str',
        'event': 'str',
        'audiences': 'list[EventAudiences]',
        'exclaudience': 'list[str]',
        'headline': 'str',
        'ednote': 'str',
        'urgency': 'str',
        'language': 'str',
        'scheduled': 'str',
        'services': 'list[str]',
        'assignedto': 'str',
        'itemcount': 'EventItemcount',
        'wordcount': 'int',
        'renditions': 'list[RenditionType]'
    }

    attribute_map = {
        'uri': 'uri',
        'title': 'title',
        'pubstatus': 'pubstatus',
        'commissioned': 'commissioned',
        'dates': 'dates',
        'type': 'type',
        'event': 'event',
        'audiences': 'audiences',
        'exclaudience': 'exclaudience',
        'headline': 'headline',
        'ednote': 'ednote',
        'urgency': 'urgency',
        'language': 'language',
        'scheduled': 'scheduled',
        'services': 'services',
        'assignedto': 'assignedto',
        'itemcount': 'itemcount',
        'wordcount': 'wordcount',
        'renditions': 'renditions'
    }

    def __init__(self, uri=None, title=None, pubstatus=None, commissioned=None, dates=None, type=None, event=None, audiences=None, exclaudience=None, headline=None, ednote=None, urgency=None, language=None, scheduled=None, services=None, assignedto=None, itemcount=None, wordcount=None, renditions=None):  # noqa: E501
        """EventPlannedcoverage - a model defined in Swagger"""  # noqa: E501
        self._uri = None
        self._title = None
        self._pubstatus = None
        self._commissioned = None
        self._dates = None
        self._type = None
        self._event = None
        self._audiences = None
        self._exclaudience = None
        self._headline = None
        self._ednote = None
        self._urgency = None
        self._language = None
        self._scheduled = None
        self._services = None
        self._assignedto = None
        self._itemcount = None
        self._wordcount = None
        self._renditions = None
        self.discriminator = None
        if uri is not None:
            self.uri = uri
        if title is not None:
            self.title = title
        if pubstatus is not None:
            self.pubstatus = pubstatus
        if commissioned is not None:
            self.commissioned = commissioned
        if dates is not None:
            self.dates = dates
        if type is not None:
            self.type = type
        if event is not None:
            self.event = event
        if audiences is not None:
            self.audiences = audiences
        if exclaudience is not None:
            self.exclaudience = exclaudience
        if headline is not None:
            self.headline = headline
        if ednote is not None:
            self.ednote = ednote
        if urgency is not None:
            self.urgency = urgency
        if language is not None:
            self.language = language
        if scheduled is not None:
            self.scheduled = scheduled
        if services is not None:
            self.services = services
        if assignedto is not None:
            self.assignedto = assignedto
        if itemcount is not None:
            self.itemcount = itemcount
        if wordcount is not None:
            self.wordcount = wordcount
        if renditions is not None:
            self.renditions = renditions

    @property
    def uri(self):
        """Gets the uri of this EventPlannedcoverage.  # noqa: E501


        :return: The uri of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this EventPlannedcoverage.


        :param uri: The uri of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def title(self):
        """Gets the title of this EventPlannedcoverage.  # noqa: E501


        :return: The title of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EventPlannedcoverage.


        :param title: The title of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def pubstatus(self):
        """Gets the pubstatus of this EventPlannedcoverage.  # noqa: E501


        :return: The pubstatus of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._pubstatus

    @pubstatus.setter
    def pubstatus(self, pubstatus):
        """Sets the pubstatus of this EventPlannedcoverage.


        :param pubstatus: The pubstatus of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """
        allowed_values = ["usable", "withheld", "canceled"]  # noqa: E501
        if pubstatus not in allowed_values:
            raise ValueError(
                "Invalid value for `pubstatus` ({0}), must be one of {1}"  # noqa: E501
                .format(pubstatus, allowed_values)
            )

        self._pubstatus = pubstatus

    @property
    def commissioned(self):
        """Gets the commissioned of this EventPlannedcoverage.  # noqa: E501


        :return: The commissioned of this EventPlannedcoverage.  # noqa: E501
        :rtype: CommissionedType
        """
        return self._commissioned

    @commissioned.setter
    def commissioned(self, commissioned):
        """Sets the commissioned of this EventPlannedcoverage.


        :param commissioned: The commissioned of this EventPlannedcoverage.  # noqa: E501
        :type: CommissionedType
        """

        self._commissioned = commissioned

    @property
    def dates(self):
        """Gets the dates of this EventPlannedcoverage.  # noqa: E501


        :return: The dates of this EventPlannedcoverage.  # noqa: E501
        :rtype: DatesobjectType
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this EventPlannedcoverage.


        :param dates: The dates of this EventPlannedcoverage.  # noqa: E501
        :type: DatesobjectType
        """

        self._dates = dates

    @property
    def type(self):
        """Gets the type of this EventPlannedcoverage.  # noqa: E501


        :return: The type of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventPlannedcoverage.


        :param type: The type of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def event(self):
        """Gets the event of this EventPlannedcoverage.  # noqa: E501


        :return: The event of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventPlannedcoverage.


        :param event: The event of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def audiences(self):
        """Gets the audiences of this EventPlannedcoverage.  # noqa: E501


        :return: The audiences of this EventPlannedcoverage.  # noqa: E501
        :rtype: list[EventAudiences]
        """
        return self._audiences

    @audiences.setter
    def audiences(self, audiences):
        """Sets the audiences of this EventPlannedcoverage.


        :param audiences: The audiences of this EventPlannedcoverage.  # noqa: E501
        :type: list[EventAudiences]
        """

        self._audiences = audiences

    @property
    def exclaudience(self):
        """Gets the exclaudience of this EventPlannedcoverage.  # noqa: E501


        :return: The exclaudience of this EventPlannedcoverage.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclaudience

    @exclaudience.setter
    def exclaudience(self, exclaudience):
        """Sets the exclaudience of this EventPlannedcoverage.


        :param exclaudience: The exclaudience of this EventPlannedcoverage.  # noqa: E501
        :type: list[str]
        """

        self._exclaudience = exclaudience

    @property
    def headline(self):
        """Gets the headline of this EventPlannedcoverage.  # noqa: E501


        :return: The headline of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this EventPlannedcoverage.


        :param headline: The headline of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def ednote(self):
        """Gets the ednote of this EventPlannedcoverage.  # noqa: E501


        :return: The ednote of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._ednote

    @ednote.setter
    def ednote(self, ednote):
        """Sets the ednote of this EventPlannedcoverage.


        :param ednote: The ednote of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._ednote = ednote

    @property
    def urgency(self):
        """Gets the urgency of this EventPlannedcoverage.  # noqa: E501


        :return: The urgency of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this EventPlannedcoverage.


        :param urgency: The urgency of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._urgency = urgency

    @property
    def language(self):
        """Gets the language of this EventPlannedcoverage.  # noqa: E501


        :return: The language of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this EventPlannedcoverage.


        :param language: The language of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def scheduled(self):
        """Gets the scheduled of this EventPlannedcoverage.  # noqa: E501


        :return: The scheduled of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._scheduled

    @scheduled.setter
    def scheduled(self, scheduled):
        """Sets the scheduled of this EventPlannedcoverage.


        :param scheduled: The scheduled of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._scheduled = scheduled

    @property
    def services(self):
        """Gets the services of this EventPlannedcoverage.  # noqa: E501


        :return: The services of this EventPlannedcoverage.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this EventPlannedcoverage.


        :param services: The services of this EventPlannedcoverage.  # noqa: E501
        :type: list[str]
        """

        self._services = services

    @property
    def assignedto(self):
        """Gets the assignedto of this EventPlannedcoverage.  # noqa: E501


        :return: The assignedto of this EventPlannedcoverage.  # noqa: E501
        :rtype: str
        """
        return self._assignedto

    @assignedto.setter
    def assignedto(self, assignedto):
        """Sets the assignedto of this EventPlannedcoverage.


        :param assignedto: The assignedto of this EventPlannedcoverage.  # noqa: E501
        :type: str
        """

        self._assignedto = assignedto

    @property
    def itemcount(self):
        """Gets the itemcount of this EventPlannedcoverage.  # noqa: E501


        :return: The itemcount of this EventPlannedcoverage.  # noqa: E501
        :rtype: EventItemcount
        """
        return self._itemcount

    @itemcount.setter
    def itemcount(self, itemcount):
        """Sets the itemcount of this EventPlannedcoverage.


        :param itemcount: The itemcount of this EventPlannedcoverage.  # noqa: E501
        :type: EventItemcount
        """

        self._itemcount = itemcount

    @property
    def wordcount(self):
        """Gets the wordcount of this EventPlannedcoverage.  # noqa: E501


        :return: The wordcount of this EventPlannedcoverage.  # noqa: E501
        :rtype: int
        """
        return self._wordcount

    @wordcount.setter
    def wordcount(self, wordcount):
        """Sets the wordcount of this EventPlannedcoverage.


        :param wordcount: The wordcount of this EventPlannedcoverage.  # noqa: E501
        :type: int
        """

        self._wordcount = wordcount

    @property
    def renditions(self):
        """Gets the renditions of this EventPlannedcoverage.  # noqa: E501


        :return: The renditions of this EventPlannedcoverage.  # noqa: E501
        :rtype: list[RenditionType]
        """
        return self._renditions

    @renditions.setter
    def renditions(self, renditions):
        """Sets the renditions of this EventPlannedcoverage.


        :param renditions: The renditions of this EventPlannedcoverage.  # noqa: E501
        :type: list[RenditionType]
        """

        self._renditions = renditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventPlannedcoverage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventPlannedcoverage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
