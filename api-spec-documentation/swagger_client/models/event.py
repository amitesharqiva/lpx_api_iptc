# coding: utf-8

"""
    LPX API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'type': 'str',
        'representationtype': 'str',
        'profile': 'str',
        'version': 'str',
        'versioncreated': 'datetime',
        'contentcreated': 'datetime',
        'embargoed': 'datetime',
        'urgency': 'float',
        'copyrightholder': 'str',
        'copyrightnotice': 'str',
        'usageterms': 'str',
        'ednote': 'str',
        'language': 'str',
        'descriptions': 'list[Eventdescriptions]',
        'bodies': 'list[Eventbodies]',
        'headlines': 'list[EventHeadlines]',
        'people': 'list[Eventpeople]',
        'organisations': 'list[OrganisationType]',
        'places': 'list[EventPlaces]',
        'subjects': 'list[EventSubjects]',
        'events': 'list[Events]',
        'eventdetails': 'list[EventDetails]',
        'plannedcoverage': 'list[EventPlannedCoverage]',
        'objects': 'list[EventObjects]',
        'infosources': 'list[Eventinfosources]',
        'title': 'str',
        'by': 'str',
        'slugline': 'str',
        'located': 'str',
        'renditions': 'list[RenditionType]',
        'associations': 'list[Eventassociations]',
        'altids': 'list[EventAltIds]',
        'trustindicators': 'list[Eventtrustindicators]',
        'standard': 'list[Eventstandard]',
        'genres': 'list[Eventgenres]',
        'expires': 'datetime',
        'rightsinfo': 'list[Eventrightsinfo]'
    }

    attribute_map = {
        'uri': 'uri',
        'type': 'type',
        'representationtype': 'representationtype',
        'profile': 'profile',
        'version': 'version',
        'versioncreated': 'versioncreated',
        'contentcreated': 'contentcreated',
        'embargoed': 'embargoed',
        'urgency': 'urgency',
        'copyrightholder': 'copyrightholder',
        'copyrightnotice': 'copyrightnotice',
        'usageterms': 'usageterms',
        'ednote': 'ednote',
        'language': 'language',
        'descriptions': 'descriptions',
        'bodies': 'bodies',
        'headlines': 'headlines',
        'people': 'people',
        'organisations': 'organisations',
        'places': 'places',
        'subjects': 'subjects',
        'events': 'events',
        'eventdetails': 'eventdetails',
        'plannedcoverage': 'plannedcoverage',
        'objects': 'objects',
        'infosources': 'infosources',
        'title': 'title',
        'by': 'by',
        'slugline': 'slugline',
        'located': 'located',
        'renditions': 'renditions',
        'associations': 'associations',
        'altids': 'altids',
        'trustindicators': 'trustindicators',
        'standard': 'standard',
        'genres': 'genres',
        'expires': 'expires',
        'rightsinfo': 'rightsinfo'
    }

    def __init__(self, uri=None, type=None, representationtype=None, profile=None, version=None, versioncreated=None, contentcreated=None, embargoed=None, urgency=None, copyrightholder=None, copyrightnotice=None, usageterms=None, ednote=None, language=None, descriptions=None, bodies=None, headlines=None, people=None, organisations=None, places=None, subjects=None, events=None, eventdetails=None, plannedcoverage=None, objects=None, infosources=None, title=None, by=None, slugline=None, located=None, renditions=None, associations=None, altids=None, trustindicators=None, standard=None, genres=None, expires=None, rightsinfo=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._uri = None
        self._type = None
        self._representationtype = None
        self._profile = None
        self._version = None
        self._versioncreated = None
        self._contentcreated = None
        self._embargoed = None
        self._urgency = None
        self._copyrightholder = None
        self._copyrightnotice = None
        self._usageterms = None
        self._ednote = None
        self._language = None
        self._descriptions = None
        self._bodies = None
        self._headlines = None
        self._people = None
        self._organisations = None
        self._places = None
        self._subjects = None
        self._events = None
        self._eventdetails = None
        self._plannedcoverage = None
        self._objects = None
        self._infosources = None
        self._title = None
        self._by = None
        self._slugline = None
        self._located = None
        self._renditions = None
        self._associations = None
        self._altids = None
        self._trustindicators = None
        self._standard = None
        self._genres = None
        self._expires = None
        self._rightsinfo = None
        self.discriminator = None
        self.uri = uri
        if type is not None:
            self.type = type
        if representationtype is not None:
            self.representationtype = representationtype
        if profile is not None:
            self.profile = profile
        if version is not None:
            self.version = version
        if versioncreated is not None:
            self.versioncreated = versioncreated
        if contentcreated is not None:
            self.contentcreated = contentcreated
        if embargoed is not None:
            self.embargoed = embargoed
        if urgency is not None:
            self.urgency = urgency
        if copyrightholder is not None:
            self.copyrightholder = copyrightholder
        if copyrightnotice is not None:
            self.copyrightnotice = copyrightnotice
        if usageterms is not None:
            self.usageterms = usageterms
        if ednote is not None:
            self.ednote = ednote
        if language is not None:
            self.language = language
        if descriptions is not None:
            self.descriptions = descriptions
        if bodies is not None:
            self.bodies = bodies
        if headlines is not None:
            self.headlines = headlines
        if people is not None:
            self.people = people
        if organisations is not None:
            self.organisations = organisations
        if places is not None:
            self.places = places
        if subjects is not None:
            self.subjects = subjects
        if events is not None:
            self.events = events
        self.eventdetails = eventdetails
        if plannedcoverage is not None:
            self.plannedcoverage = plannedcoverage
        if objects is not None:
            self.objects = objects
        if infosources is not None:
            self.infosources = infosources
        if title is not None:
            self.title = title
        if by is not None:
            self.by = by
        if slugline is not None:
            self.slugline = slugline
        if located is not None:
            self.located = located
        if renditions is not None:
            self.renditions = renditions
        if associations is not None:
            self.associations = associations
        if altids is not None:
            self.altids = altids
        if trustindicators is not None:
            self.trustindicators = trustindicators
        if standard is not None:
            self.standard = standard
        if genres is not None:
            self.genres = genres
        if expires is not None:
            self.expires = expires
        if rightsinfo is not None:
            self.rightsinfo = rightsinfo

    @property
    def uri(self):
        """Gets the uri of this Event.  # noqa: E501


        :return: The uri of this Event.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Event.


        :param uri: The uri of this Event.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501


        :return: The type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["text", "audio", "video", "picture", "graphic", "composite", "component", "event", "planning"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def representationtype(self):
        """Gets the representationtype of this Event.  # noqa: E501

        Indicates how complete this representation of a news item is. No mapping to nar. Specific for ninjs.  # noqa: E501

        :return: The representationtype of this Event.  # noqa: E501
        :rtype: str
        """
        return self._representationtype

    @representationtype.setter
    def representationtype(self, representationtype):
        """Sets the representationtype of this Event.

        Indicates how complete this representation of a news item is. No mapping to nar. Specific for ninjs.  # noqa: E501

        :param representationtype: The representationtype of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["full", "partial"]  # noqa: E501
        if representationtype not in allowed_values:
            raise ValueError(
                "Invalid value for `representationtype` ({0}), must be one of {1}"  # noqa: E501
                .format(representationtype, allowed_values)
            )

        self._representationtype = representationtype

    @property
    def profile(self):
        """Gets the profile of this Event.  # noqa: E501


        :return: The profile of this Event.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Event.


        :param profile: The profile of this Event.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def version(self):
        """Gets the version of this Event.  # noqa: E501


        :return: The version of this Event.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Event.


        :param version: The version of this Event.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def versioncreated(self):
        """Gets the versioncreated of this Event.  # noqa: E501


        :return: The versioncreated of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._versioncreated

    @versioncreated.setter
    def versioncreated(self, versioncreated):
        """Sets the versioncreated of this Event.


        :param versioncreated: The versioncreated of this Event.  # noqa: E501
        :type: datetime
        """

        self._versioncreated = versioncreated

    @property
    def contentcreated(self):
        """Gets the contentcreated of this Event.  # noqa: E501


        :return: The contentcreated of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._contentcreated

    @contentcreated.setter
    def contentcreated(self, contentcreated):
        """Sets the contentcreated of this Event.


        :param contentcreated: The contentcreated of this Event.  # noqa: E501
        :type: datetime
        """

        self._contentcreated = contentcreated

    @property
    def embargoed(self):
        """Gets the embargoed of this Event.  # noqa: E501


        :return: The embargoed of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._embargoed

    @embargoed.setter
    def embargoed(self, embargoed):
        """Sets the embargoed of this Event.


        :param embargoed: The embargoed of this Event.  # noqa: E501
        :type: datetime
        """

        self._embargoed = embargoed

    @property
    def urgency(self):
        """Gets the urgency of this Event.  # noqa: E501


        :return: The urgency of this Event.  # noqa: E501
        :rtype: float
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this Event.


        :param urgency: The urgency of this Event.  # noqa: E501
        :type: float
        """

        self._urgency = urgency

    @property
    def copyrightholder(self):
        """Gets the copyrightholder of this Event.  # noqa: E501


        :return: The copyrightholder of this Event.  # noqa: E501
        :rtype: str
        """
        return self._copyrightholder

    @copyrightholder.setter
    def copyrightholder(self, copyrightholder):
        """Sets the copyrightholder of this Event.


        :param copyrightholder: The copyrightholder of this Event.  # noqa: E501
        :type: str
        """

        self._copyrightholder = copyrightholder

    @property
    def copyrightnotice(self):
        """Gets the copyrightnotice of this Event.  # noqa: E501


        :return: The copyrightnotice of this Event.  # noqa: E501
        :rtype: str
        """
        return self._copyrightnotice

    @copyrightnotice.setter
    def copyrightnotice(self, copyrightnotice):
        """Sets the copyrightnotice of this Event.


        :param copyrightnotice: The copyrightnotice of this Event.  # noqa: E501
        :type: str
        """

        self._copyrightnotice = copyrightnotice

    @property
    def usageterms(self):
        """Gets the usageterms of this Event.  # noqa: E501


        :return: The usageterms of this Event.  # noqa: E501
        :rtype: str
        """
        return self._usageterms

    @usageterms.setter
    def usageterms(self, usageterms):
        """Sets the usageterms of this Event.


        :param usageterms: The usageterms of this Event.  # noqa: E501
        :type: str
        """

        self._usageterms = usageterms

    @property
    def ednote(self):
        """Gets the ednote of this Event.  # noqa: E501


        :return: The ednote of this Event.  # noqa: E501
        :rtype: str
        """
        return self._ednote

    @ednote.setter
    def ednote(self, ednote):
        """Sets the ednote of this Event.


        :param ednote: The ednote of this Event.  # noqa: E501
        :type: str
        """

        self._ednote = ednote

    @property
    def language(self):
        """Gets the language of this Event.  # noqa: E501


        :return: The language of this Event.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Event.


        :param language: The language of this Event.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def descriptions(self):
        """Gets the descriptions of this Event.  # noqa: E501


        :return: The descriptions of this Event.  # noqa: E501
        :rtype: list[Eventdescriptions]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this Event.


        :param descriptions: The descriptions of this Event.  # noqa: E501
        :type: list[Eventdescriptions]
        """

        self._descriptions = descriptions

    @property
    def bodies(self):
        """Gets the bodies of this Event.  # noqa: E501


        :return: The bodies of this Event.  # noqa: E501
        :rtype: list[Eventbodies]
        """
        return self._bodies

    @bodies.setter
    def bodies(self, bodies):
        """Sets the bodies of this Event.


        :param bodies: The bodies of this Event.  # noqa: E501
        :type: list[Eventbodies]
        """

        self._bodies = bodies

    @property
    def headlines(self):
        """Gets the headlines of this Event.  # noqa: E501


        :return: The headlines of this Event.  # noqa: E501
        :rtype: list[EventHeadlines]
        """
        return self._headlines

    @headlines.setter
    def headlines(self, headlines):
        """Sets the headlines of this Event.


        :param headlines: The headlines of this Event.  # noqa: E501
        :type: list[EventHeadlines]
        """

        self._headlines = headlines

    @property
    def people(self):
        """Gets the people of this Event.  # noqa: E501


        :return: The people of this Event.  # noqa: E501
        :rtype: list[Eventpeople]
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this Event.


        :param people: The people of this Event.  # noqa: E501
        :type: list[Eventpeople]
        """

        self._people = people

    @property
    def organisations(self):
        """Gets the organisations of this Event.  # noqa: E501


        :return: The organisations of this Event.  # noqa: E501
        :rtype: list[OrganisationType]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """Sets the organisations of this Event.


        :param organisations: The organisations of this Event.  # noqa: E501
        :type: list[OrganisationType]
        """

        self._organisations = organisations

    @property
    def places(self):
        """Gets the places of this Event.  # noqa: E501


        :return: The places of this Event.  # noqa: E501
        :rtype: list[EventPlaces]
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this Event.


        :param places: The places of this Event.  # noqa: E501
        :type: list[EventPlaces]
        """

        self._places = places

    @property
    def subjects(self):
        """Gets the subjects of this Event.  # noqa: E501


        :return: The subjects of this Event.  # noqa: E501
        :rtype: list[EventSubjects]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this Event.


        :param subjects: The subjects of this Event.  # noqa: E501
        :type: list[EventSubjects]
        """

        self._subjects = subjects

    @property
    def events(self):
        """Gets the events of this Event.  # noqa: E501


        :return: The events of this Event.  # noqa: E501
        :rtype: list[Events]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Event.


        :param events: The events of this Event.  # noqa: E501
        :type: list[Events]
        """

        self._events = events

    @property
    def eventdetails(self):
        """Gets the eventdetails of this Event.  # noqa: E501


        :return: The eventdetails of this Event.  # noqa: E501
        :rtype: list[EventDetails]
        """
        return self._eventdetails

    @eventdetails.setter
    def eventdetails(self, eventdetails):
        """Sets the eventdetails of this Event.


        :param eventdetails: The eventdetails of this Event.  # noqa: E501
        :type: list[EventDetails]
        """
        if eventdetails is None:
            raise ValueError("Invalid value for `eventdetails`, must not be `None`")  # noqa: E501

        self._eventdetails = eventdetails

    @property
    def plannedcoverage(self):
        """Gets the plannedcoverage of this Event.  # noqa: E501


        :return: The plannedcoverage of this Event.  # noqa: E501
        :rtype: list[EventPlannedCoverage]
        """
        return self._plannedcoverage

    @plannedcoverage.setter
    def plannedcoverage(self, plannedcoverage):
        """Sets the plannedcoverage of this Event.


        :param plannedcoverage: The plannedcoverage of this Event.  # noqa: E501
        :type: list[EventPlannedCoverage]
        """

        self._plannedcoverage = plannedcoverage

    @property
    def objects(self):
        """Gets the objects of this Event.  # noqa: E501


        :return: The objects of this Event.  # noqa: E501
        :rtype: list[EventObjects]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this Event.


        :param objects: The objects of this Event.  # noqa: E501
        :type: list[EventObjects]
        """

        self._objects = objects

    @property
    def infosources(self):
        """Gets the infosources of this Event.  # noqa: E501


        :return: The infosources of this Event.  # noqa: E501
        :rtype: list[Eventinfosources]
        """
        return self._infosources

    @infosources.setter
    def infosources(self, infosources):
        """Sets the infosources of this Event.


        :param infosources: The infosources of this Event.  # noqa: E501
        :type: list[Eventinfosources]
        """

        self._infosources = infosources

    @property
    def title(self):
        """Gets the title of this Event.  # noqa: E501


        :return: The title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.


        :param title: The title of this Event.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def by(self):
        """Gets the by of this Event.  # noqa: E501


        :return: The by of this Event.  # noqa: E501
        :rtype: str
        """
        return self._by

    @by.setter
    def by(self, by):
        """Sets the by of this Event.


        :param by: The by of this Event.  # noqa: E501
        :type: str
        """

        self._by = by

    @property
    def slugline(self):
        """Gets the slugline of this Event.  # noqa: E501


        :return: The slugline of this Event.  # noqa: E501
        :rtype: str
        """
        return self._slugline

    @slugline.setter
    def slugline(self, slugline):
        """Sets the slugline of this Event.


        :param slugline: The slugline of this Event.  # noqa: E501
        :type: str
        """

        self._slugline = slugline

    @property
    def located(self):
        """Gets the located of this Event.  # noqa: E501


        :return: The located of this Event.  # noqa: E501
        :rtype: str
        """
        return self._located

    @located.setter
    def located(self, located):
        """Sets the located of this Event.


        :param located: The located of this Event.  # noqa: E501
        :type: str
        """

        self._located = located

    @property
    def renditions(self):
        """Gets the renditions of this Event.  # noqa: E501


        :return: The renditions of this Event.  # noqa: E501
        :rtype: list[RenditionType]
        """
        return self._renditions

    @renditions.setter
    def renditions(self, renditions):
        """Sets the renditions of this Event.


        :param renditions: The renditions of this Event.  # noqa: E501
        :type: list[RenditionType]
        """

        self._renditions = renditions

    @property
    def associations(self):
        """Gets the associations of this Event.  # noqa: E501


        :return: The associations of this Event.  # noqa: E501
        :rtype: list[Eventassociations]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this Event.


        :param associations: The associations of this Event.  # noqa: E501
        :type: list[Eventassociations]
        """

        self._associations = associations

    @property
    def altids(self):
        """Gets the altids of this Event.  # noqa: E501


        :return: The altids of this Event.  # noqa: E501
        :rtype: list[EventAltIds]
        """
        return self._altids

    @altids.setter
    def altids(self, altids):
        """Sets the altids of this Event.


        :param altids: The altids of this Event.  # noqa: E501
        :type: list[EventAltIds]
        """

        self._altids = altids

    @property
    def trustindicators(self):
        """Gets the trustindicators of this Event.  # noqa: E501


        :return: The trustindicators of this Event.  # noqa: E501
        :rtype: list[Eventtrustindicators]
        """
        return self._trustindicators

    @trustindicators.setter
    def trustindicators(self, trustindicators):
        """Sets the trustindicators of this Event.


        :param trustindicators: The trustindicators of this Event.  # noqa: E501
        :type: list[Eventtrustindicators]
        """

        self._trustindicators = trustindicators

    @property
    def standard(self):
        """Gets the standard of this Event.  # noqa: E501


        :return: The standard of this Event.  # noqa: E501
        :rtype: list[Eventstandard]
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this Event.


        :param standard: The standard of this Event.  # noqa: E501
        :type: list[Eventstandard]
        """

        self._standard = standard

    @property
    def genres(self):
        """Gets the genres of this Event.  # noqa: E501


        :return: The genres of this Event.  # noqa: E501
        :rtype: list[Eventgenres]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this Event.


        :param genres: The genres of this Event.  # noqa: E501
        :type: list[Eventgenres]
        """

        self._genres = genres

    @property
    def expires(self):
        """Gets the expires of this Event.  # noqa: E501


        :return: The expires of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Event.


        :param expires: The expires of this Event.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def rightsinfo(self):
        """Gets the rightsinfo of this Event.  # noqa: E501


        :return: The rightsinfo of this Event.  # noqa: E501
        :rtype: list[Eventrightsinfo]
        """
        return self._rightsinfo

    @rightsinfo.setter
    def rightsinfo(self, rightsinfo):
        """Sets the rightsinfo of this Event.


        :param rightsinfo: The rightsinfo of this Event.  # noqa: E501
        :type: list[Eventrightsinfo]
        """

        self._rightsinfo = rightsinfo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
